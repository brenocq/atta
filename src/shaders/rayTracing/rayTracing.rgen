//--------------------------------------------------
// Atta Ray Tracing Vulkan GLSL
// rayTracing.rgen
// Date: 2021-02-09
// By Breno Cunha Queiroz
//--------------------------------------------------
#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require

#include "samplers/random.glsl"
#include "bxdf/bxdf.glsl"
#include "bxdf/bsdf.glsl"
#include "rayPayload.glsl"
#include "camera.glsl"
#include "uniformBufferObject.glsl"
#include "base.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT scene;
layout(binding = 1, rgba32f) uniform image2D accumulationImage;
layout(binding = 2, rgba8) uniform image2D outputImage;
layout(binding = 3) readonly uniform UniformBufferObjectStruct { UniformBufferObject ubo; };
layout(binding = 8) readonly buffer LightStruct { Light[] lightBuffer; };

layout(location = 0) rayPayloadEXT RayPayload ray;

#include "lights/light.glsl"// Need to access the light buffer

void main() 
{
	vec3 pixelColor = vec3(0);
	uint pixelSeed = tea(tea(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y), ubo.seed);

	// Accumulate all the rays for this pixels
	for(uint s = 0; s < ubo.samplesPerPixel; s++)
	{
		// Sample pixel (TODO use specific 2D sampler algorithm to improve results)
		const vec2 pixel = vec2(gl_LaunchIDEXT.x+randomFloat(pixelSeed)-0.5, gl_LaunchIDEXT.y+randomFloat(pixelSeed)-0.5);
		const vec2 uv = (pixel / gl_LaunchSizeEXT.xy) * 2.0 - 1.0;

		// Calculate camera ray (TODO use specific 2D sampler algorithm to improve results)
		CameraRay rayFromCamera;
		float lensRadius = 0.125;
		float focusDistance = 17.32;
		rayFromCamera = generateRayProjectiveCamera(
			ubo.projMatInverse, ubo.viewMatInverse, uv, 
			lensRadius, focusDistance, vec2(randomFloat(pixelSeed), randomFloat(pixelSeed)));
		vec3 origin = rayFromCamera.origin;
		vec3 direction = rayFromCamera.direction;

		//---------- Path integrator ----------//
		vec3 L = vec3(0.f);// Radiance value
		vec3 beta = vec3(1.f);// Path throughput weight (BSDF*Geometry) (fraction of radiance from the light source that arrives at the camera)
		bool specularBounce = false;// Handle special case when the ray reflects in only one direction
		uint bounces;

		for(bounces = 0;; bounces++)
		{
			const float tMin = 0.001;
			const float tMax = 10000.0;

			// Intersect ray with scene
			traceRayEXT(
				scene, gl_RayFlagsOpaqueEXT, 0xff, 
				0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/, 
				origin, tMin, direction, tMax, 0 /*payload*/);

			BSDF bsdf = ray.it.bsdf;
			const bool foundIntersection = (ray.t>=0);

			// Add emitted light
			if(bounces == 0 || specularBounce)
			{
				if(foundIntersection)
				{
					// TODO Add emitted light at path vertex (Emissive objects not supported yet)
					//L += beta * vec3(.2,.2,.2);
				}
				else
				{
					// TODO Add environment light (Infinity lights not supported yet)
					// Search infinity lights
					L += beta * vec3(.4,.4,.4);
				}
			}

			// Terminate path if ray miss or maxDepth reached
			if(!foundIntersection || bounces>=ubo.maxDepth)
				break;

			float uLightIndex = randomFloat(pixelSeed);
			vec2 uLight = vec2(randomFloat(pixelSeed), randomFloat(pixelSeed));
			vec2 uScattering = vec2(randomFloat(pixelSeed), randomFloat(pixelSeed));
			vec3 Ld = beta*Light_uniformSampleOneLight(ubo.nLights, ray.it, uLightIndex, uLight, uScattering);
			L += Ld;

			// Update next ray origin from intersection
			// Update next ray direction from BSDF sample
			//direction = vec4(ray.scatterDirection.xyz, 0);
			vec3 wo = -direction, wi;
			float pdf;
			uint flags;
			vec2 u = vec2(randomFloat(pixelSeed), randomFloat(pixelSeed));
			vec3 f = BSDF_sampleF(bsdf, wo, wi, u, pdf, BXDF_FLAG_ALL, flags);
			if(isBlack(f) || pdf == 0) break;
			beta *= f * abs(dot(wi, bsdf.ns))/pdf;

			specularBounce = (flags & BXDF_FLAG_SPECULAR)!=0;

			// Possibly terminate the path with Russian roulette
			if(bounces > 3)
			{
				float q = max(0.05, 1-maxComponentValue(beta));
				if(randomFloat(pixelSeed) < q) break;
				beta /= 1-q;
			}

			origin = origin + ray.t * direction;
			direction = wo;
		}
		pixelColor += L;
	}

	//const bool accumulate = camera.numberOfSamples != camera.totalNumberOfSamples;
	//const vec3 accumulatedColor = imageLoad(accumulationImage, ivec2(gl_LaunchIDEXT.xy)).xyz + pixelColor;
	//pixelColor = accumulatedColor/ubo.totalNumberOfSamples;
	pixelColor = pixelColor/ubo.samplesPerPixel;

	//if(camera.gammaCorrection)
	//{
	//	// Apply raytracing-in-one-weekend gamma correction.
	//	pixelColor = sqrt(pixelColor);
	//}

	//imageStore(accumulationImage, ivec2(gl_LaunchIDEXT.xy), vec4(accumulatedColor, 0));
    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(pixelColor, 0));
}
