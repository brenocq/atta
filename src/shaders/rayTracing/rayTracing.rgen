#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_NV_ray_tracing : require
#include "random.glsl"
#include "rayPayload.glsl"
#include "uniformBufferObject.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureNV scene;
layout(binding = 1, rgba32f) uniform image2D accumulationImage;
layout(binding = 2, rgba8) uniform image2D outputImage;
layout(binding = 3) readonly uniform UniformBufferObjectStruct { UniformBufferObject camera; };

layout(location = 0) rayPayloadNV RayPayload ray;

void main() 
{
	// Initialise separate random seeds for the pixel and the rays.
	// - pixel: we want the same random seed for each pixel to get a homogeneous anti-aliasing.
	// - ray: we want a noisy random seed, different for each pixel.
	uint pixelRandomSeed = camera.randomSeed;
	ray.randomSeed = initRandomSeed(initRandomSeed(gl_LaunchIDNV.x, gl_LaunchIDNV.y), camera.totalNumberOfSamples);

	vec3 pixelColor = vec3(0);

	// Accumulate all the rays for this pixels.
	for(uint s = 0; s < camera.numberOfSamples; s++)
	{
		//if (Camera.NumberOfSamples != Camera.TotalNumberOfSamples) break;
		const vec2 pixel = vec2(gl_LaunchIDNV.x + randomFloat(pixelRandomSeed), gl_LaunchIDNV.y + randomFloat(pixelRandomSeed));
		const vec2 uv = (pixel / gl_LaunchSizeNV.xy) * 2.0 - 1.0;

		vec2 offset = camera.aperture/2 * randomInUnitDisk(ray.randomSeed);
		vec4 origin = camera.modelViewInverse * vec4(offset, 0, 1);
		vec4 target = camera.projectionInverse * (vec4(uv.x, uv.y, 1, 1));
		vec4 direction = camera.modelViewInverse * vec4(normalize(target.xyz * camera.focusDistance - vec3(offset, 0)), 0);
		vec3 rayColor = vec3(1);

		// Ray scatters are handled in this loop. There are no recursive traceNV() calls in other shaders.
		for (uint b = 0; b < camera.numberOfBounces; ++b)
		{
			const float tMin = 0.001;
			const float tMax = 10000.0;

			traceNV(
				scene, gl_RayFlagsOpaqueNV, 0xff, 
				0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/, 
				origin.xyz, tMin, direction.xyz, tMax, 0 /*payload*/);
			
			const vec3 hitColor = ray.colorAndDistance.rgb;
			const float t = ray.colorAndDistance.w;
			const bool isScattered = ray.scatterDirection.w > 0;

			rayColor *= hitColor;

			// Trace missed, or end of trace.
			if (t < 0 || !isScattered)
			{				
				break;
			}

			// Trace hit.
			origin = origin + t * direction;
			direction = vec4(ray.scatterDirection.xyz, 0);
		}

		pixelColor += rayColor;
	}

	const bool accumulate = camera.numberOfSamples != camera.totalNumberOfSamples;
	const vec3 accumulatedColor = (accumulate ? imageLoad(accumulationImage, ivec2(gl_LaunchIDNV.xy)) : vec4(0)).rgb + pixelColor;

	pixelColor = accumulatedColor / camera.totalNumberOfSamples;

	if(camera.gammaCorrection)
	{
		// Apply raytracing-in-one-weekend gamma correction.
		pixelColor = sqrt(pixelColor);
	}

	imageStore(accumulationImage, ivec2(gl_LaunchIDNV.xy), vec4(accumulatedColor, 0));
    imageStore(outputImage, ivec2(gl_LaunchIDNV.xy), vec4(pixelColor, 0));
}
